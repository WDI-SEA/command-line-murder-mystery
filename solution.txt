    1  ls-a
    2  ls -a
    3  cd ..
    4  pwd
    5  cd -a
    6  mkdir myfolder
    7  mkdir myfolder
    8  mkdir myfolder
    9  cd myfolder
   10  myfolder
   11  ls -a
   12  mkdir myfolder
   13  pwd
   14  ls -ltr
   15  mkdir myfolder
   16  pwd
   17  mkdir abc
   18  pwd
   19  mkdir xyz
   20  pwd
   21  ls
   22  rm abc
   23  rm -r abc
   24  ls
   25  rm -r xyz
   26  ls
   27  mkdir myfolder
   28  ls
   29  cd my folder
   30  cd myfolder
   31  touch index.html style.css
   32  rm -r myfolder
   33  rmdir
   34  ls -a Documents
   35  ls Downloads
   36  ls World.zip
   37  ls World
   38  ls -a World.zip
   39  $ brew install git\n\n
   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n
   41   git --version
   42  git --version
   43  $ git init
   44  mkdir directory
   45  Ga-Blog
   46  mkdir directory-GA-Blog
   47  $ git init
   48  pwd
   49  ls
   50  directory-GA-Blog
   51  cd directory-GA-Blog
   52  pwd
   53  $ git init
   54  ls
   55  .git/
   56  touch .git/
   57  "touch" .git/
   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile
   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n
   61   eval "$(/opt/homebrew/bin/brew shellenv)"
   62  eval "$(/opt/homebrew/bin/brew shellenv)"
   63  cd /Users/aqsakhatoon
   64  ls
   65  cat .zprofile
   66  homebrew help
   67  brew help
   68  brew install git
   69  git --version
   70  cd directory-GA-Blog
   71  LS
   72  git --init
   73  ls/
   74  ls
   75  touch .git/
   76  touch .git
   77  ls
   78  ls -ltr
   79  git init
   80  pwd
   81  rm -r .git
   82  ls -ltr
   83  ls 
   84  git init
   85  pwd
   86  ls -
   87  ls -a
   88  pwd
   89  run
   90  run git init
   91  la -a
   92  ls-a
   93  ls -a
   94  .git
   95  touch post.txt
   96  git status
   97  git add post.txt
   98  git status
   99  git log
  100  ls -a
  101  touch README.txt
  102  git status
  103  git add README.txt
  104  gut status
  105  git status
  106  git commit -m "..."
  107  brew install git
  108  git config --global user.name aqsakhatoon
  109  git config --global user.email khanabrar_02@yahoo.com
  110  git config --global push.default simple
  111  git config --global credential.helper cache\n
  112  git config --global core.editor 'code -w'
  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'
  114  git config --global --list
  115  brew install --cask visual-studio-code
  116  'shell command'
  117  code
  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  119  brew --version
  120  xcode-select --install
  121  brew install zsh
  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  123  pwd
  124  ls
  125  la -a
  126  Desktop ls
  127  ls -l
  128  cd
  129  cd Desktop
  130  pwd
  131  ls
  132  ls -a
  133  pwd
  134  cd
  135  pwd
  136  cd .
  137  cd ./current-projects/argv
  138  pwd
  139  mkdir seir-808
  140  ls
  141  cd seir-808
  142  ls
  143  ls -a
  144  mkdir unit1
  145  cd unit1
  146  pwd
  147  mkdir cli-intro
  148  cd cli-intro
  149  pwd
  150  touch notes.txt
  151  ls
  152  code .
  153  cat notes.txt
  154  ls
  155  mkdir my-junk
  156  ls
  157  my notes.txt my-junk/notes.txt
  158  touch file.txt .hidden-file other-file.js
  159  ls
  160  notes.txt my-junk/notes.txt
  161  ls
  162  man ls
  163  ls -l
  164  ls -la
  165  ls -R
  166  ls -Rla
  167  ls
  168  rm file.txt
  169  ls
  170  rm my-junk
  171  man
  172  rm -rf my-junk
  173  ls
  174  rm notes.txt
  175  ls
  176  cd ..
  177  rmdir cli-intro
  178  cd cli-intro
  179  ls
  180  echo "hello world
  181  echo 'hello world!'
  182  echo 'hello web dev'
  183  echo 'hello redirection' >> hello.txt
  184  ls
  185  cat hello.txt
  186  touch whatever
  187  ls
  188  echo 'new thing' >> hello.txt
  189  cat hello.txt
  190  echo 'newest thing' > hello.txt
  191  cat hello.txt
  192  touch books.txt
  193  code .
  194  cat books.tst
  195  cat books.txt
  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls
  197  code books.txt
  198  ls -la
  199  cat books.txt
  200  ls -la
  201  cat books.tst
  202  cat books.txt
  203  cd ..
  204  pwd
  205  mkdir my-first-repo
  206  cd ..
  207  cd my-first-repo
  208  pwd
  209  cd
  210  cd unit1
  211  pwd
  212  cd seir-808
  213  cd unit1
  214  ls
  215  cd my-first-repo
  216  git:(main) 
  217  git:(main)0
  218  git init
  219  rm -rf .git
  220  git config --global init.defaultBranch main
  221  git init
  222  ls -a
  223  git status
  224  git add index.html
  225  git status
  226  git add index.html
  227  ls
  228  git add index.html
  229  touch index.html
  230  git add index.html
  231  git status
  232  git commit
  233  echo 'git is super dope' >> notes.txt
  234  ls
  235  git status
  236  git add .
  237  git commit -m 'took some notes on git'
  238  git status 
  239  ls
  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git
  241  git remote -v
  242  git branch -M main
  243  git push origin main
  244  git remote -v
  245  .github/PULL_REQUEST_TEMPLATE.md
  246  ls
  247  readlink -f
  248  clmystery-master
  249  ls
  250  Is
  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery
  252  ls
  253  cd
  254  cd command-line-murder-mystery
  255  cat instructions
  256  cat cheatsheet.md
  257  cat instructions
  258  cat cheatsheet.md
  259  solution.txt
  260  ls
  261  cd mystery
  262  ls
  263  cd crimescene
  264  cat crimescene
  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)
  266  ls
  267  grep "CLUE" crimescene
  268  cat hint1
  269  cd ..
  270  cat hint1
  271  cat hint2
  272  grep "CLUE" crimescene
  273  cat hint3
  274  head -n 20 cheatsheet.md
  275  head vehicles
  276  cd mystery
  277  head vehicles
  278  head people
  279  grep "Annabel" people
  280  grep "l337" vehicles
  281  grep "L337" vehicles
  282  head -n 176 Haley_Street
  283  grep -A 5 "L337" mystery/vehicles
  284  grep -A 5 "L337"
  285  cat vehicles
  286  grep -A 5 "L337"
  287  grep "L337" vehicles
  288  grep -A 5 "L337" mystery/vehicles
  289  grep -A 5 "L337" vehicles
  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"
  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"
  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n
  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"
  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%
  295  ls
  296  cd memberships
  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"
  298  ls
  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"
  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"
  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"
  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"
  303  history
  304  cd ..
  305  ls
  306  touch solutions.txt
  307  ls
  308  cat solutions.txt
  309  history
  310  echo '1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt\n1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt' >> solutions.txt
  311  echo '1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt\n' >> solutions.txt
  312  ls
  313  history
  314  echo ' 1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt\n  309  history\n  310  echo '1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file---\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt\n1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt' >> solutions.txt\n  311  echo '1  ls-a\n    2  ls -a\n    3  cd ..\n    4  pwd\n    5  cd -a\n    6  mkdir myfolder\n    7  mkdir myfolder\n    8  mkdir myfolder\n    9  cd myfolder\n   10  myfolder\n   11  ls -a\n   12  mkdir myfolder\n   13  pwd\n   14  ls -ltr\n   15  mkdir myfolder\n   16  pwd\n   17  mkdir abc\n   18  pwd\n   19  mkdir xyz\n   20  pwd\n   21  ls\n   22  rm abc\n   23  rm -r abc\n   24  ls\n   25  rm -r xyz\n   26  ls\n   27  mkdir myfolder\n   28  ls\n   29  cd my folder\n   30  cd myfolder\n   31  touch index.html style.css\n   32  rm -r myfolder\n   33  rmdir\n   34  ls -a Documents\n   35  ls Downloads\n   36  ls World.zip\n   37  ls World\n   38  ls -a World.zip\n   39  $ brew install git\n\n\n   40  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n   41   git --version\n   42  git --version\n   43  $ git init\n   44  mkdir directory\n   45  Ga-Blog\n   46  mkdir directory-GA-Blog\n   47  $ git init\n   48  pwd\n   49  ls\n   50  directory-GA-Blog\n   51  cd directory-GA-Blog\n   52  pwd\n   53  $ git init\n   54  ls\n   55  .git/\n   56  touch .git/\n   57  "touch" .git/\n   58  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n   59  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/aqsakhatoon/.zprofile\n   60      eval "$(/opt/homebrew/bin/brew shellenv)"\n\n   61   eval "$(/opt/homebrew/bin/brew shellenv)"\n   62  eval "$(/opt/homebrew/bin/brew shellenv)"\n   63  cd /Users/aqsakhatoon\n   64  ls\n   65  cat .zprofile\n   66  homebrew help\n   67  brew help\n   68  brew install git\n   69  git --version\n   70  cd directory-GA-Blog\n   71  LS\n   72  git --init\n   73  ls/\n   74  ls\n   75  touch .git/\n   76  touch .git\n   77  ls\n   78  ls -ltr\n   79  git init\n   80  pwd\n   81  rm -r .git\n   82  ls -ltr\n   83  ls \n   84  git init\n   85  pwd\n   86  ls -\n   87  ls -a\n   88  pwd\n   89  run\n   90  run git init\n   91  la -a\n   92  ls-a\n   93  ls -a\n   94  .git\n   95  touch post.txt\n   96  git status\n   97  git add post.txt\n   98  git status\n   99  git log\n  100  ls -a\n  101  touch README.txt\n  102  git status\n  103  git add README.txt\n  104  gut status\n  105  git status\n  106  git commit -m "..."\n  107  brew install git\n  108  git config --global user.name aqsakhatoon\n  109  git config --global user.email khanabrar_02@yahoo.com\n  110  git config --global push.default simple\n  111  git config --global credential.helper cache\n\n  112  git config --global core.editor 'code -w'\n  113  git config --global push.default simple\ngit config --global credential.helper cache\n# optional: set the default git editor to be vscode to aviod getting stuck in vim\ngit config --global core.editor 'code -w'\n  114  git config --global --list\n  115  brew install --cask visual-studio-code\n  116  'shell command'\n  117  code\n  118  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n  119  brew --version\n  120  xcode-select --install\n  121  brew install zsh\n  122  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n  123  pwd\n  124  ls\n  125  la -a\n  126  Desktop ls\n  127  ls -l\n  128  cd\n  129  cd Desktop\n  130  pwd\n  131  ls\n  132  ls -a\n  133  pwd\n  134  cd\n  135  pwd\n  136  cd .\n  137  cd ./current-projects/argv\n  138  pwd\n  139  mkdir seir-808\n  140  ls\n  141  cd seir-808\n  142  ls\n  143  ls -a\n  144  mkdir unit1\n  145  cd unit1\n  146  pwd\n  147  mkdir cli-intro\n  148  cd cli-intro\n  149  pwd\n  150  touch notes.txt\n  151  ls\n  152  code .\n  153  cat notes.txt\n  154  ls\n  155  mkdir my-junk\n  156  ls\n  157  my notes.txt my-junk/notes.txt\n  158  touch file.txt .hidden-file other-file.js\n  159  ls\n  160  notes.txt my-junk/notes.txt\n  161  ls\n  162  man ls\n  163  ls -l\n  164  ls -la\n  165  ls -R\n  166  ls -Rla\n  167  ls\n  168  rm file.txt\n  169  ls\n  170  rm my-junk\n  171  man\n  172  rm -rf my-junk\n  173  ls\n  174  rm notes.txt\n  175  ls\n  176  cd ..\n  177  rmdir cli-intro\n  178  cd cli-intro\n  179  ls\n  180  echo "hello world\n  181  echo 'hello world!'\n  182  echo 'hello web dev'\n  183  echo 'hello redirection' >> hello.txt\n  184  ls\n  185  cat hello.txt\n  186  touch whatever\n  187  ls\n  188  echo 'new thing' >> hello.txt\n  189  cat hello.txt\n  190  echo 'newest thing' > hello.txt\n  191  cat hello.txt\n  192  touch books.txt\n  193  code .\n  194  cat books.tst\n  195  cat books.txt\n  196  cat books.txtCarroll, Lewis:Through the Looking-Glass\nShakespeare, William:Hamlet\nBartlett, John:Familiar Quotations\nMill, John :On Nature\nLondon, Jack:John Barleycorn\nBunyan, John:Pilgrim's Progress, The\nDefoe, Daniel:Robinson Crusoe\nMill, John Stuart:System of Logic, A\nMilton, John:Paradise Lost\nJohnson, Samuel:Lives of the Poets\nShakespeare, William:Julius Caesar\nMill, John Stuart:On Liberty\nBunyan, John:Saved by Grace\n\nls\n  197  code books.txt\n  198  ls -la\n  199  cat books.txt\n  200  ls -la\n  201  cat books.tst\n  202  cat books.txt\n  203  cd ..\n  204  pwd\n  205  mkdir my-first-repo\n  206  cd ..\n  207  cd my-first-repo\n  208  pwd\n  209  cd\n  210  cd unit1\n  211  pwd\n  212  cd seir-808\n  213  cd unit1\n  214  ls\n  215  cd my-first-repo\n  216  git:(main) \n  217  git:(main)0\n  218  git init\n  219  rm -rf .git\n  220  git config --global init.defaultBranch main\n  221  git init\n  222  ls -a\n  223  git status\n  224  git add index.html\n  225  git status\n  226  git add index.html\n  227  ls\n  228  git add index.html\n  229  touch index.html\n  230  git add index.html\n  231  git status\n  232  git commit\n  233  echo 'git is super dope' >> notes.txt\n  234  ls\n  235  git status\n  236  git add .\n  237  git commit -m 'took some notes on git'\n  238  git status \n  239  ls\n  240  git remote add origin https://github.com/aqsakhatoon/first-repo-808.git\n  241  git remote -v\n  242  git branch -M main\n  243  git push origin main\n  244  git remote -v\n  245  .github/PULL_REQUEST_TEMPLATE.md\n  246  ls\n  247  readlink -f\n  248  clmystery-master\n  249  ls\n  250  Is\n  251  git clone https://github.com/aqsakhatoon/command-line-murder-mystery\n  252  ls\n  253  cd\n  254  cd command-line-murder-mystery\n  255  cat instructions\n  256  cat cheatsheet.md\n  257  cat instructions\n  258  cat cheatsheet.md\n  259  solution.txt\n  260  ls\n  261  cd mystery\n  262  ls\n  263  cd crimescene\n  264  cat crimescene\n  265  Playing with text on the command line\n=====================================\n\nThe command line (also known as the command line interface, or CLI, or sometimes the terminal), is a plain text-based interface for executing commands on a computer.  If you've ever seen a movie about hackers from the 1980s, like *WarGames*, where they stare at a prompt on a black screen and type in commands one at a time, it's basically that.\n\nYou have a prompt, and you can type in a command and hit 'Enter' to execute it.  An example command would be:\n\n\ttouch newfile.txt\n\nThis command will create a file called `newfile.txt`.\n\nHow to access the command line\n------------------------------\n\n**Mac OS X:** Go to /Applications/Utilities and click on "Terminal" or search for "Terminal" in Spotlight.\n\n**Desktop Linux:** You can search for the "Terminal" application from the Dash.  Let's be honest, though, if you're running Linux, you probably don't need this tutorial.\n\n**Windows:** Windows is a bit of a special case.  If you go to the Start Menu and click "Run", and then type "cmd" and hit enter, it will open the Windows version of the command line.  Unfortunately, the Windows version of the command line kind of has its own system, so for the purposes of following these examples, you'll want to install Cygwin, which will allow you to mimic a Linux-style command line:\n\nhttp://www.cygwin.com/\n\nA little more detail\n--------------------\n\nCommands generally take the format:\n\n\t[name of the command] [option] [option] [option] ...\n\nThe prompt will also show what directory you're currently sitting in.  Whenever you execute a command, you do it from a particular directory.  This matters because when you execute a command that involves a filename or a directory name, you can specify it one of two ways:\n\n#### Relative Paths\n\nSpecifying a file or directory as a relative path means you are specifying where it sits relative to the directory you're in.  For example, let's say you're in the `videos` subdirectory of the `files` directory.  You'll see this prompt:\n\n\t/files/videos$\n\nIf you execute a command like `touch newfile.txt`, it will create `newfile.txt` inside the current directory.  Relative paths don't start with a slash.\n\n#### Absolute Paths\n\nSpecifying a file or directory as an absolute path means you are specifying where it sits on the computer in absolute terms, starting from the top level.  For example, let's say you're in the `videos` subdirectory of the `files` directory again.\n\n\t/files/videos$\n\nIf you execute a command like `touch /files/music/newfile.txt`, it will create `newfile.txt` inside a different folder, the `music` subfolder of the `files` folder.  *Absolute paths start with a slash.*\n\nIf you use an absolute path, the command will do the same thing no matter what directory you execute it from.\n\nSo these two commands will have the same result from the `/files/videos` directory:\n\n\t/files/videos$ rm video.mp4\n\t(This will delete the file `video.mp4` from the current directory)\n\n\t/files/videos$ rm /files/videos/video.mp4\n\t(This will delete `video.mp4` from the /files/videos/ directory, which happens to be the current directory)\n\nThe same two commands will not have the same result if you are in a different directory:\n\n\t/files/text$ rm video.mp4\n\t(This will try to delete the file video.mp4 from the 'text' subdirectory instead, because that's the current directory)\n\n\t/files/text$ rm /files/videos/video.mp4\n\t(This will delete the file from the /files/videos/ directory, even though it isn't the current directory)\n\nRemember:\n\n**Starting a path with a slash** means you want to give the entire path and ignore what directory you're currently in.\n**Not starting a path with a slash** means you want to give the path starting from the directory you're in.\n\nIf you're ever unsure of what directory you're in, you can use the `pwd` (Print Working Directory) command to get the absolute path of the current directory.\n\n\t~$ pwd\n\t/Users/Noah\n\nFile Patterns\n-------------\n\nIn most cases when you have to specify a file name or directory name, you can also specify a general **pattern** that might match multiple files.  There are lots of ins and outs with this, but the most basic version is using the asterisk (*), which matches anything.  It's also known as a wildcard.\n\n\tDelete any file in the current directory\n\t/files$ rm *\n\n\tDelete any file that ends in '.txt'\n\t/files$ rm *.txt\n\n\tDelete any file that starts with 'data'\n\t/files$ rm data*\n\nNavigating\n----------\n\nThe two core commands for navigating what directory the prompt is in are `cd` and `ls`.\n\n`cd` is a command to change the current directory, and must be followed by a directory you want to change to.  You can supply an absolute or relative path.\n\n\tThis will put you in /files/videos\n\t/files$ cd videos\t\n\t/files/videos$\n\n\tThis will put you in /videos, and then the vines subdirectory\n\t/files$ cd /videos\n\t/videos$ cd vines\n\t/videos/vines$\n\nYou can jump multiple levels at once if you want.\n\n\tThis will put you in /files/videos/short\n\t/files$ cd videos/short\n\nYou can use `cd ..` to move up one level to the parent directory.\n\n\tThis will put you in /files\n\t/files/videos$ cd ..\n\n`ls` will list the files in the current directory.  It's helpful for figuring out where you are, what files exist, and what subfolders exist.\n\n\t/photos$ ls\t\n\tthumbnails  photo1.jpg  photo2.jpg\n\nUsing `ls -l` will print the list vertically, with lots of other extra information about the file size, permissions, and last modified date:\n\n\t/photos$ ls -l\n\t-rw-rw-r-- 1 noah noah 58133 Oct 22 17:13 photo1.jpg\n\t-rw-rw-r-- 1 noah noah 75640 Oct 22 17:13 photo2.jpg\n\tdrwxrwxr-x 2 noah noah 4096  Oct 22 17:13 thumbnails\n\nWhen typing in a directory or file name, you can hit the 'Tab' key to autocomplete if it's possible.  For example, in the /photos folder, if you type in:\n\n\t/photos$ cd thu\n\nand hit 'Tab,' it will fill in the rest and show you:\n\n\t/photos$ cd thumbnails\n\nHowever, if there is more than possible file/directory that matches what you've typed so far, it won't work.  If you type:\n\n\t/photos$ rm pho\n\nand hit 'Tab,' nothing will happen because you could be on your way to `photo1.jpg` OR `photo2.jpg`.\n\nCommand Output\n--------------\n\nThe commands we're going to talk about all output their results as text.  When you execute the command by hitting 'Enter', it will print out a bunch of output on extra lines below the prompt. For example, `head [file]` will print out the first 10 lines of a file.\n\t\n\t/files$ head names.txt\n\tDan Sinker\n\tErika Owens\n\tNoah Veltman\n\tAnnabel Church\n\tFriedrich Lindenberg\n\tSonya Song\n\tMike Tigas\n\tBrian Abelson\n\tManuel Aristaran\n\tStijn Debrouwere\n\t/files$\n\nNotice that after it prints out its output, it goes back to giving you a fresh prompt.  Getting the output printed out to you in this fashion is useful if you're just poking around, but often you want to do one of two things: **send the output to a file**, or **send the output to another command as an input**.\n\n### Sending the output to a file\n\nYou can send the output to a new file this way:\n\n\t/files$ head names.txt > first10names.txt\n\nIf first10names.txt doesn't exist, it will be created.  If it already exists, it will be overwritten.\n\nYou can append the output to the end of an existing file this way:\n\n\t/files$ head names.txt >> allnames.txt\n\nThis will add the output as 10 new lines at the end of allnames.txt.\n\n### Sending the output to another command as an input\n\nYou can send the output to another command using the pipe symbol (|).  The `grep` command searches through some text for matches (more on this later), so you could do this to get the first 10 lines of a file, and then search for "Steve" within those 10 lines:\n\n\t/files$ head names.txt | grep "Steve"\n\nThis is basically the same as doing this:\n\n\t/files$ head names.txt > temporaryfile.txt\n\t/files$ grep "Steve" temporaryfile.txt\n\nBut instead of first sending the output to a file and then running the second command on that file, you pipe the output directly from the first command into the second.  You can chain as many of these together as you want:\n\n\t/files$ grep "United States" addresses.csv | grep "California" | head\n\nThis would search the file addresses.csv for lines that contain the phrase "United States", then search the results for lines that contain the word "California", and then print out the first 10 of those matches.\n\nGrep\n----\n\nThe `grep` command will let you search a file (or multiple files) for a phrase.  By default, it will print out each line that matches your search.\n\nPrint out lines that contain the word "darkwing":\n\n\t/files$ grep "darkwing" famousducks.txt\n\nSame as above, but the search is case-insensitive:\n\n\t/files$ grep -i "darkwing" famousducks.txt\n\nFind matches for the exact *word* "Donald" in a file - words that contain "Donald," like "McDonald," won't count:\n\n\tgrep -w "Donald" famousducks.txt\n\nFind matches for "McDuck" in every file in the current directory:\n\n\tgrep "McDuck" *\n\nFind matches for "McDuck" in every file in the current directory AND every subdirectory, all the way down:\n\n\tgrep -r "McDuck" *\n\nFor each match of "Howard", print out that line AND the 4 lines after it (5 lines total):\n\n\tgrep -A 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it (5 lines total):\n\n\tgrep -B 4 "Howard" famousducks.txt\n\nFor each match of "Howard", print out that line AND the 4 lines before it AND the 4 lines after it (9 lines total):\n\n\tgrep -C 4 "Howard" famousducks.txt\n\nInstead of printing out the matching lines themselves, print out the filenames that match your search:\n\n\tgrep -l "Daffy" *\n\nJust get the number of matches:\n\n\tgrep -c "Daffy" *\n\nShow line numbers along with the matching lines:\n\n\tgrep -n "Daffy" famousducks.txt\n\nCat\n---\n\nThe `cat` command will combine multiple files together. This will print three files in a row, as if they were one file:\n\n\tcat turkey.txt duck.txt chicken.txt\n\nRemember that this will just print the output into your terminal.  More likely, you want to create a new file that combines them:\n\n\tcat turkey.txt duck.txt chicken.txt > turducken.txt\n\nturducken.txt will contain all of the lines in turkey.txt, followed by all of the lines in duck.txt, followed by all of the lines in chicken.txt.\n\nIf you want to combine ALL of the files in a directory, you can use a wildcard:\n\n\tcat * > allfilescombined.txt\n\nHead\n----\n\nThe `head` command will print out the first 10 lines of a file:\n\n\t/files$ head names.txt\n\nYou can also specify a different number of lines.  This will print out the first 15 lines of a file:\n\n\t/files$ head -n 15 names.txt\n\nOr, if you want to print all the file but leave out the LAST 15 lines, you can give a negative number:\n\n\t/files$ head -n -15 names.txt\n\nOne of the nice uses of head is to quickly peek inside a large text file to see what's in it without having to wait for a text editor to load it.  This becomes a big deal when you're talking about a 1 GB file!\n\nTail\n----\n\nThe `tail` command is the reverse of head.  It will print out the last 10 lines of a file:\n\n\t/files$ tail names.txt\n\nThis will print out the last 15 lines of a file:\n\n\t/files$ tail -n 15 names.txt\n\nOr, if you want to print all the file but leave out the FIRST 15 lines, you can add a plus sign:\n\n\t/files$ tail -n +15 names.txt\n\nThis is helpful if you want to, say, remove a header row from a CSV file:\n\n\t/files$ tail -n +1 names.txt > names-no-header.txt\n\nMiscellaneous\n-------------\n\nIf you just want to print out the entire contents of a file into your terminal, you can use `cat` and not combine it with anything.  This is sort of against the whole point of `cat`, but is a handy trick.\n\n\t/files$ cat address.txt\n\t1600 Pennsylvania Avenue\n\tWashington, DC 20500\n\nIf you want to get serious and open a file in a text editor that comes built in to your terminal, you can try `nano`:\n\n\t/files$ nano address.txt\n\nHow many lines are in names.txt?\n\n\t/files$ wc -l names.txt\n\t18\n\nRegular expressions\n-------------------\n\nWhen using something like `grep` to search, you can search for a simple term with only letters, numbers, and spaces.  But if you want to search for a pattern, you can use what's called a **regular expression**.  Regular expressions use special characters to represent patterns, like "any number," "any letter," "X or Y," "at least three lowercase letters," and so on.\n\nWe won't worry about the ins and outs for now, but one useful operator is the period (.).  In regular expression-ese, this means "One of any character."  So you can search for something like:\n\n\t/files$ grep -i "car.s" dictionary.txt\n\nThis would match words like `cards`,`carts`,`cares`, and so on.  It would also match the middle of the phrase "scar story" (CAR S) because "any character" means ANY character, including a space or a punctuation mark.\n\nOne more example:\n\n\t/files$ grep -i ".e.st" dictionary.txt\n\nThis would match things like `least`,`beast`, and `heist`.\n\nMore than one way to skin a cat\n------------------------------\n\nThere are often lots of equally legitimate commands or combinations of commands to achieve the same purpose.\n\nExample:\n\n\t/files$ head -n 12 names.txt | tail -n 5\n\t(Print out the first 12 lines, and then print out the last 5 lines of that)\n\n\tis the same as\n\n\t/files$ tail -n +7 names.txt | head -n 5\n\t(Print out everything but the first 7 lines, then print the first 5 lines of that)\n\n\tis pretty much the same as:\n\n\t/files$ tail -n +7 names.txt > temporaryfile.txt\n\t/files$ head -n 5 temporaryfile.txt\n\t/files$ rm temporaryfile.txt\n\t(Save everything but the first 7 lines to a temporary file, then print the first 5 lines of that, then delete the temporary file)\n\n---\n\n## Questions/Comments/Suggestions ##\nNoah Veltman  \nWeb: http://noahveltman.com  \nTwitter: [@veltman](http://twitter.com/veltman)  \nEmail: [noah@noahveltman.com](mailto:noah@noahveltman.com)  %                   ➜  command-line-murder-mystery git:(main)\n  266  ls\n  267  grep "CLUE" crimescene\n  268  cat hint1\n  269  cd ..\n  270  cat hint1\n  271  cat hint2\n  272  grep "CLUE" crimescene\n  273  cat hint3\n  274  head -n 20 cheatsheet.md\n  275  head vehicles\n  276  cd mystery\n  277  head vehicles\n  278  head people\n  279  grep "Annabel" people\n  280  grep "l337" vehicles\n  281  grep "L337" vehicles\n  282  head -n 176 Haley_Street\n  283  grep -A 5 "L337" mystery/vehicles\n  284  grep -A 5 "L337"\n  285  cat vehicles\n  286  grep -A 5 "L337"\n  287  grep "L337" vehicles\n  288  grep -A 5 "L337" mystery/vehicles\n  289  grep -A 5 "L337" vehicles\n  290  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jacqui Maher"\n  291  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  292  cat Museum_of_Bash_History| grep -c "Jeremy Bowers"\n\n  293  cat Fitness_Galaxy AAA United_MileagePlus | grep -c "Jeremy Bowers"\n  294  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers" | wc -l%\n  295  ls\n  296  cd memberships\n  297  cat Fitness_Galaxy AAA United_MileagePlus | grep "Jeremy Bowers"\n  298  ls\n  299  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Erika Owens"\n  300  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jeremy Bowers"\n  301  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Jacqui Maher"\n  302  cat AAA Delta_SkyMiles Museum_of_Bash_History library.txt | grep -c "Joe Germuska"\n  303  history\n  304  cd ..\n  305  ls\n  306  touch solutions.txt\n  307  ls\n  308  cat solutions.txt\n' >> solutions.txt\n  312  ' >> solutions.txt
  315  cat solutions.txt
  316  code solutions.txt
  317  git status
  318  git add solutions.txt
  319  git status
  320  git commit -m
  321  git commit -m 'my first homework solution'
  322  git status
  323  cd ..
  324  pwd
